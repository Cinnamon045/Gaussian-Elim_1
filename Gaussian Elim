import numpy as np
import numpy as np

Mat_A = np.array([
                  [1  , 2 , 3, 6, 1],
                  [2 , -3 , 2, 14, 20],
                   [3 , 1 , -1, -2, 31], 
                   [2 , 5 , -7, -9, 31]
                  ])

Mat_B = np.array([
                  [0.0  , 0.0 , 0.0, 0.0, 0], 
                   [0.0 , 0.0 , 0.0, 0.0, 0], 
                    [0.0 , 0.0 , 0.0, 0.0, 0], 
                    [0.0 , 0.0 , 0.0, 0.0, 0] 
                  ])

n_row, n_col = Mat_A.shape

for row in range(n_row):
  for column in range(n_col):
    Mat_B[row, column] = Mat_A[row, column]


for k in range(1,n_row):
  for r in range(k, n_row):
    Mat_B[r] = Mat_B[r] - Mat_B[k-1]*(Mat_B[r,k-1]/Mat_B[k-1,k-1])

for r in range(n_row):
  Mat_B[r] = Mat_B[r]/Mat_B[r,r]



#Mat_B[1] = Mat_B[1] - Mat_B[0]*(Mat_B[1,0]/Mat_B[0,0])
#Mat_B[2] = Mat_B[2] - Mat_B[0]*(Mat_B[2,0]/Mat_B[0,0])

#Mat_B[2] = Mat_B[2] - Mat_B[1]*(Mat_B[2,1]/Mat_B[1,1])

Mat_C = np.round(Mat_B, decimals = 2)


for r in range(n_row - 2 ,-1,-1):
  for k in range(n_row - 1,0,-1):
    count = k - r
    while count > 0:
      Mat_C[r] = Mat_C[r] - Mat_C[k]*Mat_C[r,k]
      count = count - 1

#k = 1
#for r in [1,0]:
  #Mat_C[r] = Mat_C[r] - Mat_C[k2]*Mat_C[r,k]

Mat_C
Mat_A = np.array([
                  [1  , 2 , 3, 6, 1],
                  [2 , -3 , 2, 14, 20],
                   [3 , 1 , -1, -2, 31], 
                   [2 , 5 , -7, -9, 31]
                  ])

Mat_B = np.array([
                  [0.0  , 0.0 , 0.0, 0.0, 0], 
                   [0.0 , 0.0 , 0.0, 0.0, 0], 
                    [0.0 , 0.0 , 0.0, 0.0, 0], 
                    [0.0 , 0.0 , 0.0, 0.0, 0] 
                  ])

n_row, n_col = Mat_A.shape

for row in range(n_row):
  for column in range(n_col):
    Mat_B[row, column] = Mat_A[row, column]


for k in range(1,n_row):
  for r in range(k, n_row):
    Mat_B[r] = Mat_B[r] - Mat_B[k-1]*(Mat_B[r,k-1]/Mat_B[k-1,k-1])

for r in range(n_row):
  Mat_B[r] = Mat_B[r]/Mat_B[r,r]



#Mat_B[1] = Mat_B[1] - Mat_B[0]*(Mat_B[1,0]/Mat_B[0,0])
#Mat_B[2] = Mat_B[2] - Mat_B[0]*(Mat_B[2,0]/Mat_B[0,0])

#Mat_B[2] = Mat_B[2] - Mat_B[1]*(Mat_B[2,1]/Mat_B[1,1])

Mat_C = np.round(Mat_B, decimals = 2)


for r in range(n_row - 2 ,-1,-1):
  for k in range(n_row - 1,0,-1):
    count = k - r
    while count > 0:
      Mat_C[r] = Mat_C[r] - Mat_C[k]*Mat_C[r,k]
      count = count - 1

#k = 1
#for r in [1,0]:
  #Mat_C[r] = Mat_C[r] - Mat_C[k2]*Mat_C[r,k]

Mat
