Import numpy as np

def GaussElim(A_matrix, b_matrix):

  #Checking if A_Matrix is a square matrix
  if A_matrix.shape[0] != A_matrix.shape[1]:
    print("Error: The given matrix is not a square matrix")
    return

  #Checking if b_Matrix is a 1xb matrix
  if b_matrix.shape[1] > 1.0 or (b_matrix.shape[0] != A_matrix.shape[0]):
    print("Error: Please check the dimension of the constant matrix")
    return

  #Initializing the necesary variables
  n = len(b_matrix)           #number of rows - number of equations
  m = n - 1
  i = 0
  x = np.zeros(n)
  new_line = "\n"

  #Creating the Augmented Matrix
  Augmented_Matrix = np.concatenate((A_matrix, b_matrix), axis = 1, dtype = float)  #axis = 0 (row); axis = 1 (column)

  print(f"The initial Augmented Matrix is: {new_line}{Augmented_Matrix}")
  print("Solving for the upper triangular matrix: ")

  #Applying Gaussian Elimination
  while i < n:
    if Augmented_Matrix[i,i] == 0.0:
      print("Divide by zero error")
      return

    for j in range(i+1, n):
      scaling_factor = Augmented_Matrix[j,i]/Augmented_Matrix[i,i]
      Augmented_Matrix[j] = Augmented_Matrix[j] - (scaling_factor * Augmented_Matrix[i])

      print(new_line, np.round(Augmented_Matrix, decimals = 2), new_line)

    i = i + 1

#Back Substition
  x[m] = Augmented_Matrix[m][n]/Augmented_Matrix[m][m]  #Bottom of the reduced row echelon form of the Augmented Matrix
  print(new_line, np.round(x, decimals = 2), new_line)
  
  for k in range(n - 2, -1, -1):          #k = 2, 1, 0(row index)
    x[k] = Augmented_Matrix[k][n]
    print(np.round(x, decimals = 2), new_line)
    
    for j in range(k+1,n):
      x[k] = x[k] - Augmented_Matrix[k][j]*x[j]
    
    x[k] = x[k]/Augmented_Matrix[k][k]

 
    print(np.round(x, decimals = 2), new_line)
